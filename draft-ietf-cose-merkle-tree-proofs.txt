



COSE                                                           O. Steele
Internet-Draft                                                 Transmute
Intended status: Standards Track                             H. Birkholz
Expires: 8 February 2026                                  Fraunhofer SIT
                                                      A. Delignat-Lavaud
                                                              C. Fournet
                                                               Microsoft
                                                           7 August 2025


                             COSE Receipts
               draft-ietf-cose-merkle-tree-proofs-latest

Abstract

   COSE (CBOR Object Signing and Encryption) Receipts prove properties
   of a verifiable data structure to a verifier.  Verifiable data
   structures and associated proof types enable security properties,
   such as minimal disclosure, transparency and non-equivocation.
   Transparency helps maintain trust over time, and has been applied to
   certificates, end to end encrypted messaging systems, and supply
   chain security.  This specification enables concise transparency
   oriented systems, by building on CBOR (Concise Binary Object
   Representation) and COSE.  The extensibility of the approach is
   demonstrated by providing CBOR encodings for RFC9162.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the CBOR Object Signing
   and Encryption Working Group mailing list (cose@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/cose/.

   Source for this draft and an issue tracker can be found at
   https://github.com/cose-wg/draft-ietf-cose-merkle-tree-proofs.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 February 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Requirements Notation
   2.  New COSE Header Parameters
   3.  Terminology
   4.  Verifiable Data Structures in CBOR
     4.1.  Structures
     4.2.  Proofs
     4.3.  Usage
       4.3.1.  Registration Requirements
   5.  RFC9162_SHA256
     5.1.  Verifiable Data Structure
     5.2.  Inclusion Proof
       5.2.1.  Receipt of Inclusion
     5.3.  Consistency Proof
       5.3.1.  Receipt of Consistency
   6.  Privacy Considerations
     6.1.  Log Length
     6.2.  Header Parameters
   7.  Security Considerations
     7.1.  Choice of Signature Algorithms
     7.2.  Validity Period
     7.3.  Status Updates
   8.  IANA Considerations
     8.1.  COSE Header Parameter
     8.2.  Verifiable Data Structure Registries
       8.2.1.  Expert Review
       8.2.2.  COSE Verifiable Data Structures
       8.2.3.  COSE Verifiable Data Structure Proofs
   9.  Acknowledgements
   10. References
     10.1.  Normative References
     10.2.  Informative References
   Appendix A.  Implementation Status
     A.1.  Transmute Prototype
   Authors' Addresses

1.  Introduction

   COSE Receipts are signed proofs that include metadata about certain
   states of a verifiable data structure (VDS) that are true when the
   COSE Receipt was issued.  COSE Receipts can include proofs that a
   document is in a database (proof of inclusion), that a database is
   append only (proof of consistency), that a smaller set of statements
   are contained in a large set of statements (proof of disclosure, a
   special case of proof of inclusion), or proof that certain data is
   not yet present in a database (proofs of non inclusion).  Different
   VDS can produce different verifiable data structure proofs (VDP).
   The combination of representations of various VDS and VDP can
   significantly increase burden for implementers and create
   interoperability challenges for transparency services.  This document
   describes how to convey VDS and associated VDP types in unified COSE
   envelopes.

1.1.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  New COSE Header Parameters

   This document defines three new COSE header parameters, which are
   introduced up-front in this Section and elaborated on later in this
   document.

   TBD_0 (requested assignment 394):  A COSE header parameter named
      receipts with a value type of array where the array contains one
      or more COSE Receipts as specified in this document.

   TBD_1 (requested assignment 395):  A COSE header parameter named vds
      (Verifiable Data Structure), which conveys the algorithm
      identifier for a verifiable data structure.  Correspondingly, this
      document introduces a new Section 8.2.2 that registers the
      integers used to identify verifiable data structures.

   TBD_2 (requested assignment 396):  A COSE header parameter named vdp
      (short for "verifiable data structure proofs"), which conveys a
      map containing verifiable data structure proofs organized by proof
      type.  Correspondingly, this document introduces a new
      Section 8.2.3 that registers the integers used to identify
      verifiable data structure proof types.

3.  Terminology

   CDDL:  Concise Data Definition Language (CDDL) is defined in
      [RFC8610].

   EDN:  CBOR Extended Diagnostic Notation (EDN) is defined in
      [RFC8949], where it is referred to as "diagnostic notation", and
      is revised in [I-D.draft-ietf-cbor-edn-literals].

   Verifiable Data Structure (VDS):  A data structure which supports one
      or more Verifiable Data Structure Proof Types.  This property
      describes an algorithm used to maintain a verifiable data
      structure, for example a binary Merkle tree algorithm.

   Verifiable Data Structure Proofs (VDP):  A data structure used to
      convey proof types for proving different properties, such as
      authentication, inclusion, consistency, and freshness.  Parameters
      can include multiple proofs of a given type, or multiple types of
      proof (inclusion and consistency).

   Proof Type:  A property that can be obtained by verifying a given
      proof over one or more entries in a Verifiable Data Structure.
      For example, a VDS, such as a binary Merkle tree, can support
      proofs of type "inclusion" where each proof confirms that a given
      entry is included in a Merkle root.

   Proof Value:  An encoding of a Proof Type in CBOR [RFC8949].

   Entry:  An entry in a verifiable data structure for which proofs can
      be derived.

   Receipt:  A COSE object, as defined in [RFC9052], containing the
      header parameters necessary to convey VDP for an associated VDS.

4.  Verifiable Data Structures in CBOR

   This section describes representations of verifiable data structure
   proofs in [RFC8949].  For example, construction of a Merkle tree
   leaf, or an inclusion proof from a leaf to a Merkle root, might have
   several different representations, depending on the verifiable data
   structure used.  Differences in representations are necessary to
   support efficient verification, unique security or privacy
   properties, and for compatibility with specific implementations.
   This document defines two extension points for enabling verifiable
   data structures with COSE and provides concrete examples for the
   structures and proofs defined in [RFC9162].  The design of these
   structures is influenced by the conventions established for COSE
   Keys.

4.1.  Structures

   Similar to COSE Key Types (https://www.iana.org/assignments/cose/
   cose.xhtml#key-type), different verifiable data structures support
   different algorithms.

   This document establishes a registry of verifiable data structure
   algorithms, with the following initial contents:

   +================+=======+===========================+===========+
   | Name           | Value | Description               | Reference |
   +================+=======+===========================+===========+
   | Reserved       | 0     | Reserved                  | Reserved  |
   +----------------+-------+---------------------------+-----------+
   | RFC9162_SHA256 | 1     | SHA256 Binary Merkle Tree | [RFC9162] |
   +----------------+-------+---------------------------+-----------+

                Table 1: COSE Verifiable Data Structures

4.2.  Proofs

   Similar to COSE Key Type Parameters
   (https://www.iana.org/assignments/cose/cose.xhtml#key-type-
   parameters), as EC2 keys (1: 2) keys require and give meaning to
   specific parameters, such as -1 (crv), -2 (x), -3 (y), -4 (d),
   RFC9162_SHA256 (TBD_1 (requested assignment 395) : 1) supports both
   (-1) inclusion and (-2) consistency proofs.

   This document establishes a registry of verifiable data structure
   algorithms, with the following initial contents:

   +============+=============+=====+=======+=============+===========+
   | Verifiable | Name        |Label| CBOR  | Description | Reference |
   | Data       |             |     | Type  |             |           |
   | Structure  |             |     |       |             |           |
   +============+=============+=====+=======+=============+===========+
   | 1          | inclusion   |-1   | array | Proof of    | Section   |
   |            | proofs      |     | (of   | inclusion   | 5.2       |
   |            |             |     | bstr) |             |           |
   +------------+-------------+-----+-------+-------------+-----------+
   | 1          | consistency |-2   | array | Proof of    | Section   |
   |            | proofs      |     | (of   | append only | 5.3       |
   |            |             |     | bstr) | property    |           |
   +------------+-------------+-----+-------+-------------+-----------+

              Table 2: COSE Verifiable Data Structure Proofs

   Proof types are specific to their associated "verifiable data
   structure", for example, different Merkle trees might support
   different representations of "inclusion proof" or "consistency
   proof".  Implementers should not expect interoperability across
   "verifiable data structures", but they should expect conceptually
   similar properties across the different registered proof types.  For
   example, 2 different Merkle tree based verifiable data structures
   might both support proofs of inclusion.  Security analysis MUST be
   conducted prior to migrating to new structures to ensure the new
   security and privacy assumptions are acceptable for the use case.

4.3.  Usage

   This document registers a new COSE Header Parameter receipts (TBD_0
   (requested assignment 394)) to enable this Receipts to be conveyed in
   the protected and unprotected headers of COSE Objects.

   When the receipts header parameter is present, the associated
   verifiable data structure and verifiable data structure proofs MUST
   match entries present in the registries established in this
   specification.

   Receipts MUST be tagged as COSE_Sign1.

   The following [RFC8610] definition is provided:

   Receipt = #6.18(COSE_Sign1)

   cose-value = any

   Protected_Header = {
     * cose-label => cose-value
   }

   Unprotected_Header = {
     &(receipts: 394)  => [+ bstr .cbor Receipt]
     * cose-label => cose-value
   }

   COSE_Sign1 = [
     protected   : bstr .cbor Protected_Header,
     unprotected : Unprotected_Header,
     payload     : bstr / nil,
     signature   : bstr
   ]

           Figure 1: CDDL for a COSE Sign1 with attached receipts

   The following informative EDN is provided:

   / cose-sign1 / 18([
     / protected   / <<{
       / key / 4 : "vCl7UcS0ZZY99VpRthDc-0iUjLdfLtnmFqLJ2-Tt8N4",
       / algorithm / 1 : -7,  # ES256
     }>>,
     / unprotected / {
       / receipts / 394 : {
         <</ cose-sign1 / 18([
           / protected   / <<{
             / key / 4 : "mxA4KiOkQFZ-dkLebSo3mLOEPR7rN8XtxkJe45xuyJk",
             / algorithm / 1 : -7,  # ES256
             / vds       / 395 : 1, # RFC9162 SHA-256
           }>>,
           / unprotected / {
             / proofs / 396 : {
               / inclusion / -1 : [
                 <<[
                   / size / 9, / leaf / 8,
                   / inclusion path /
                   h'7558a95f...e02e35d6'
                 ]>>
               ],
             },
           },
           / payload     / null,
           / signature   / h'02d227ed...ccd3774f'
         ])>>,
         <</ cose-sign1 / 18([
           / protected   / <<{
             / key / 4 : "ajOkeBTJou_wPrlExLMw7L9OTCD5ZIOBYc-O6LESe9c",
             / algorithm / 1 : -7,  # ES256
             / vds       / 395 : 1, # RFC9162 SHA-256
           }>>,
           / unprotected / {
             / proofs / 396 : {
               / inclusion / -1 : [
                 <<[
                   / size / 6, / leaf / 5,
                   / inclusion path /
                   h'9352f974...4ffa7ce0',
                   h'54806f32...f007ea06'
                 ]>>
               ],
             },
           },
           / payload     / null,
           / signature   / h'36581f38...a5581960'
         ])>>
       },
     },
     / payload     / h'0167c57c...deeed6d4',
     / signature   / h'2544f2ed...5840893b'
   ])

         Figure 2: An example COSE Signature with multiple receipts

   The specific structure of COSE Receipts are dependent on the
   structure of the COSE_Sign1 payload and the verifiable data structure
   proofs contained in the COSE_Sign1 unprotected header.  The CDDL for
   specific verifiable data structure proofs is verifiable data
   structure specific.  This document describes proofs for
   RFC9162_SHA256 in the following sections.

4.3.1.  Registration Requirements

   Each specification MUST define how to encode the verifiable data
   structure identifier and its proof types in CBOR.  Each specification
   MUST define how to produce and consume the supported proof types.
   See Section 5 as an example.

   Where a specification supports a choice of hash algorithm, an IANA
   registration must be made for each individually supported algorithm.
   For example, to provide for both SHA256 and SHA3_256 with [RFC9162],
   both "RFC9162_SHA256" and "RFC9162_SHA3_256" require entries in the
   relevant IANA registries.

5.  RFC9162_SHA256

   This section defines how the data structures described in [RFC9162]
   are mapped to the terminology defined in this document, using
   [RFC8949] and [RFC9053].

5.1.  Verifiable Data Structure

   The integer identifier for this Verifiable Data Structure is 1.  The
   string identifier for this Verifiable Data Structure is
   "RFC9162_SHA256".  See Table 1.  See [RFC9162], 2.1.1.  Definition of
   the Merkle Tree, for a complete description of this verifiable data
   structure.

5.2.  Inclusion Proof

   See [RFC9162], 2.1.3.1.  Generating an Inclusion Proof, for a
   complete description of this verifiable data structure proof type.

   The CBOR representation of an inclusion proof for RFC9162_SHA256 is:

   inclusion-proof = bstr .cbor [

       ; tree size at current Merkle root
       tree-size: uint

       ; index of leaf in tree
       leaf-index: uint

       ; path from leaf to current Merkle root
       inclusion-path: [ + bstr ]
   ]

               Figure 3: CBOR Encoded RFC9162 Inclusion Proof

   The term leaf-index is used for alignment with the use established in
   [RFC9162]

   Note that [RFC9162] defines that verification MUST fail if leaf-index
   is >= tree-size, and inclusion proofs are defined only for leaf
   nodes.  The identifying index of a leaf node is relative to all nodes
   in the tree size for which the proof was obtained.

5.2.1.  Receipt of Inclusion

   In a signed inclusion proof, the payload is the Merkle tree root
   which corresponds to the log at size tree-size.  Specifications are
   encouraged to make payloads detached when possible, forcing
   validation-time comparison.  Profiles of proof signatures are
   encouraged to make additional protected header parameters mandatory,
   to ensure that claims are processed with their intended semantics.
   One way to include this information in the COSE structure is use of
   the typ (type) Header Parameter, see [RFC9596] and the similar
   guidance provided in [RFC9597].  The protected header for an
   RFC9162_SHA256 inclusion proof signature is:

   protected-header-map = {
     &(alg: 1) => int
     &(vds: 395) => int
     * cose-label => cose-value
   }

           Figure 4: Protected Header for a Receipt of Inclusion

   *  alg (label: 1): REQUIRED.  Signature algorithm identifier.  Value
      type: int.

   *  vds (label: TBD_1 (requested assignment 395)): REQUIRED.
      Verifiable data structure algorithm identifier.  Value type: int.

   The unprotected header for an RFC9162_SHA256 inclusion proof
   signature is:

   inclusion-proofs = [ + inclusion-proof ]

   verifiable-proofs = {
     &(inclusion-proof: -1) => inclusion-proofs
   }

   unprotected-header-map = {
     &(vdp: 396) => verifiable-proofs
     * cose-label => cose-value
   }

   Figure 5: A Verifiable Data Structure Proofs in an Unprotected Header

   *  vdp (label: TBD_2 (requested assignment 396)): REQUIRED.
      Verifiable data structure proofs.  Value type: Map.

   *  inclusion-proof (label: -1): REQUIRED.  Inclusion proofs.  Value
      type: Array of bstr.

   The payload of an RFC9162_SHA256 inclusion proof signature is the
   Merkle tree hash as defined in [RFC9162].  The payload SHOULD be
   detached.  Detaching the payload forces verifiers to recompute the
   root from the inclusion proof, this protects against implementation
   errors where the signature is verified but the Merkle root does not
   match the inclusion proof.  The EDN for a Receipt containing an
   inclusion proof for RFC9162_SHA256 is:

   / cose-sign1 / 18([
     / protected   / <<{
       / algorithm / 1 : -7,  # ES256
       / vds       / 395 : 1, # RFC9162 SHA-256
     }>>,
     / unprotected / {
       / proofs / 396 : {
         / inclusion / -1 : [
           <<[
             / size / 20, / leaf / 17,
             / inclusion path /
             h'fc9f050f...221c92cb',
             h'bd0136ad...6b28cf21',
             h'd68af9d6...93b1632b'
           ]>>
         ],
       },
     },
     / payload     / null,
     / signature   / h'de24f0cc...9a5ade89'
   ])

                       Figure 6: Receipt of Inclusion

   The VDS in the protected header is necessary to understand the
   inclusion proof structure in the unprotected header.

   The inclusion proof and signature are verified in order.  First the
   verifiers applies the inclusion proof to a possible entry (set
   member) bytes.  If this process fails, the inclusion proof may have
   been tampered with.  If this process succeeds, the result is a Merkle
   root, which in the attached as the COSE Sign1 payload.  Second the
   verifier checks the signature of the COSE Sign1.  If the resulting
   signature verifies, the Receipt has proved inclusion of the entry in
   the verifiable data structure.  If the resulting signature does not
   verify, the signature may have been tampered with.  It is recommended
   that implementations return a single boolean result for Receipt
   verification operations, to reduce the chance of accepting a valid
   signature over an invalid inclusion proof.

5.3.  Consistency Proof

   See [RFC9162], 2.1.4.1.  Generating a Consistency Proof, for a
   complete description of this verifiable data structure proof type.

   The cbor representation of a consistency proof for RFC9162_SHA256 is:

   consistency-proof =  bstr .cbor [

       ; older Merkle root tree size
       tree-size-1: uint

       ; newer Merkle root tree size
       tree-size-2: uint

       ; path from older Merkle root to newer Merkle root.
       consistency-path: [ + bstr ]

   ]

              Figure 7: CBOR Encoded RFC9162 Consistency Proof

5.3.1.  Receipt of Consistency

   In a signed consistency proof, the newer Merkle tree root (proven to
   be consistent with an older Merkle tree root) is an attached payload
   and corresponds to the log at size tree-size-2.

   The protected header for an RFC9162_SHA256 consistency proof
   signature is:

   protected-header-map = {
     &(alg: 1) => int
     &(vds: 395) => int
     * cose-label => cose-value
   }

          Figure 8: Protected Header for a Receipt of Consistency

   *  alg (label: 1): REQUIRED.  Signature algorithm identifier.  Value
      type: int.

   *  vds (label: TBD_1 (requested assignment 395)): REQUIRED.
      Verifiable data structure algorithm identifier.  Value type: int.

   The unprotected header for an RFC9162_SHA256 consistency proof
   signature is:

   consistency-proofs = [ + consistency-proof ]

   verifiable-proofs = {
     &(consistency-proof: -2) => consistency-proofs
   }

   unprotected-header-map = {
     &(vdp: 396) => verifiable-proofs
     * cose-label => cose-value
   }

   *  vdp (label: TBD_2 (requested assignment 396)): REQUIRED.
      Verifiable data structure proofs.  Value type: Map.

   *  consistency-proof (label: -2): REQUIRED.  Consistency proofs.
      Value type: Array of bstr.

   The payload of an RFC9162_SHA256 consistency proof signature is: The
   newer Merkle tree hash as defined in [RFC9162].  The payload SHOULD
   be detached.  Detaching the payload forces verifiers to recompute the
   root from the consistency proof, this protects against implementation
   errors where the signature is verified but the Merkle root does not
   match the proof.

   The EDN for a Receipt containing a consistency proof for
   RFC9162_SHA256 is:

   / cose-sign1 / 18([
     / protected   / <<{
       / algorithm / 1 : -7,  # ES256
       / vds       / 395 : 1, # RFC9162 SHA-256
     }>>,
     / unprotected / {
       / proofs / 396 : {
         / consistency / -2 : [
           <<[
             / old / 20, / new / 104,
             / consistency path /
             h'e5b3e764...c4a813bc',
             h'87e8a084...4f529f69',
             h'f712f76d...92a0ff36',
             h'd68af9d6...93b1632b',
             h'249efab6...b7614ccd',
             h'85dd6293...38914dc1'
           ]>>
         ],
       },
     },
     / payload     / null,
     / signature   / h'94469f73...52de67a1'
   ])

                   Figure 9: Example consistency receipt

   The VDS in the protected header is necessary to understand the
   consistency proof structure in the unprotected header.

   The signature and consistency proof are verified in order.

   First the verifier checks the signature on the COSE Sign1.  If the
   verification fails, the consistency proof is not checked.  Second the
   consistency proof is checked by applying a previous inclusion proof,
   to the consistency proof.  If the verification fails, the append only
   property of the verifiable data structure is not assured.  This
   approach is specific to RFC9162_SHA256, different verifiable data
   structures may not support consistency proofs.  It is recommended
   that implementations return a single boolean result for Receipt
   verification operations, to reduce the chance of accepting a valid
   signature over an invalid consistency proof.

6.  Privacy Considerations

   The privacy considerations section of [RFC9162] and [RFC9053] apply
   to this document.

6.1.  Log Length

   Some structures and proofs leak the size of the log at the time of
   inclusion.  In the case that a log only stores certain kinds of
   information, this can reveal details that could impact reputation.
   For example, if a transparency log only stored breach notices, a
   receipt for a breach notice would reveal the number of previous
   breaches at the time the notice was made transparent.

6.2.  Header Parameters

   Additional header parameters can reveal information about the
   transparency service or its log entries.  A privacy analysis MUST be
   performed for all mandatory fields in profiles based on this
   specification.

7.  Security Considerations

   See the security considerations section of:

   *  [RFC9162]

   *  [RFC9053]

7.1.  Choice of Signature Algorithms

   A security analysis MUST be performed to ensure that the digital
   signature algorithm alg has the appropriate strength to secure
   receipts.

   It is recommended to select signature algorithms that share
   cryptographic components with the verifiable data structure used, for
   example: Both RFC9162_SHA256 and ES256 depend on the sha-256 hash
   function.

7.2.  Validity Period

   In some cases, receipts MAY include strict validity periods, for
   example, activation not too far in the future, or expiration, not too
   far in the past.  See the iat, nbf, and exp claims in [RFC8392], for
   one way to accomplish this.  The details of expressing validity
   periods are out of scope for this document.

7.3.  Status Updates

   In some cases, receipts should be "revocable" or "suspendible", after
   being issued, regardless of their validity period.  The details of
   expressing statuses are out of scope for this document.

8.  IANA Considerations

8.1.  COSE Header Parameter

   IANA is requested to add the COSE header parameters defined in
   Section 2, as listed in Table 3, to the "COSE Header Parameters"
   registry [IANA.cose_header-parameters] in the 'Integer values from
   256 to 65535' range ('Specification Required' Registration
   Procedure).  The Value Registry for "vds" is the COSE Verifiable Data
   Structure registry.  The map labels in the "vdp" are assigned from
   the COSE Verifiable Data Structure Proofs registry.

    +========+=============+=====+============+=============+=========+
    |Name    | Label       |Value| Value      | Description |Reference|
    |        |             |Type | Registry   |             |         |
    +========+=============+=====+============+=============+=========+
    |receipts| TBD_0       |array|            | Priority    |RFCthis, |
    |        | (requested  |     |            | ordered     |Section 2|
    |        | assignment: |     |            | sequence of |         |
    |        | 394)        |     |            | CBOR        |         |
    |        |             |     |            | encoded     |         |
    |        |             |     |            | Receipts    |         |
    +--------+-------------+-----+------------+-------------+---------+
    |vds     | TBD_1       |int  | COSE       | Algorithm   |RFCthis, |
    |        | (requested  |     | Verifiable | identifier  |Section 2|
    |        | assignment: |     | Data       | for         |         |
    |        | 395)        |     | Structure  | verifiable  |         |
    |        |             |     |            | data        |         |
    |        |             |     |            | structures, |         |
    |        |             |     |            | used to     |         |
    |        |             |     |            | produce     |         |
    |        |             |     |            | verifiable  |         |
    |        |             |     |            | data        |         |
    |        |             |     |            | structure   |         |
    |        |             |     |            | proofs      |         |
    +--------+-------------+-----+------------+-------------+---------+
    |vdp     | TBD_2       |map  | map key in | Location    |RFCthis, |
    |        | (requested  |     | COSE       | for         |Section 2|
    |        | assignment: |     | Verifiable | verifiable  |         |
    |        | 396)        |     | Data       | data        |         |
    |        |             |     | Structure  | structure   |         |
    |        |             |     | Proofs     | proofs in   |         |
    |        |             |     |            | COSE Header |         |
    |        |             |     |            | Parameters  |         |
    +--------+-------------+-----+------------+-------------+---------+

              Table 3: Newly registered COSE Header Parameters

8.2.  Verifiable Data Structure Registries

   IANA established the COSE Verifiable Data Structures and COSE
   Verifiable Data Structure Proofs registries under a Specification
   Required policy as described in [RFC8126].

8.2.1.  Expert Review

   Expert reviewers should take into consideration the following points:

   *  Experts are advised to assign the next available positive integer
      for verifiable data structures.

   *  Point squatting should be discouraged.  Reviewers are encouraged
      to get sufficient information for registration requests to ensure
      that the usage is not going to duplicate one that is already
      registered, and that the point is likely to be used in
      deployments.

   *  Specifications are required for all point assignments.  Early
      Allocation is permissible, see Section 2 of [RFC7120].

   *  It is not permissible to assign points in COSE Verifiable Data
      Structures, for which no corresponding COSE Verifiable Data
      Structure Proofs entry exists, and vice versa.

   *  The Change Controller for related registrations of structures and
      proofs should be the same.

8.2.2.  COSE Verifiable Data Structures

   Registration Template:

   *  Name: This is a descriptive name for the verifiable data structure
      that enables easier reference to the item.

   *  Value: This is the value used to identify the verifiable data
      structure.

   *  Description: This field contains a brief description of the
      verifiable data structure.

   *  Reference: This contains a pointer to the public specification for
      the verifiable data structure.

   *  Change Controller: For Standards Track RFCs, list the "IETF".  For
      others, give the name of the responsible party.  Other details
      (e.g., postal address, email address, home page URI) may also be
      included.

   Initial contents: Provided in Table 1

8.2.3.  COSE Verifiable Data Structure Proofs

   Registration Template:

   *  Verifiable Data Structure: This value used identifies the related
      verifiable data structure.

   *  Name: This is a descriptive name for the proof type that enables
      easier reference to the item.

   *  Label: This is the value used to identify the verifiable data
      structure proof type.

   *  CBOR Type: This contains the CBOR type for the value portion of
      the label.

   *  Description: This field contains a brief description of the proof
      type.

   *  Reference: This contains a pointer to the public specification for
      the proof type.

   *  Change Controller: For Standards Track RFCs, list the "IETF".  For
      others, give the name of the responsible party.  Other details
      (e.g., postal address, email address, home page URI) may also be
      included.

   Initial contents: Provided in Table 2

9.  Acknowledgements

   We would like to thank Maik Riechert, Jon Geater, Michael B.  Jones,
   Mike Prorock, Ilari Liusvaara, Amaury Chamayou, for their
   contributions (some of which substantial) to this draft and to the
   initial set of implementations.

10.  References

10.1.  Normative References

   [IANA.cose_header-parameters]
              IANA, "COSE Header Parameters",
              <https://www.iana.org/assignments/cose>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

   [RFC8949]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", STD 94, RFC 8949,
              DOI 10.17487/RFC8949, December 2020,
              <https://www.rfc-editor.org/rfc/rfc8949>.

   [RFC9053]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Initial Algorithms", RFC 9053, DOI 10.17487/RFC9053,
              August 2022, <https://www.rfc-editor.org/rfc/rfc9053>.

   [RFC9162]  Laurie, B., Messeri, E., and R. Stradling, "Certificate
              Transparency Version 2.0", RFC 9162, DOI 10.17487/RFC9162,
              December 2021, <https://www.rfc-editor.org/rfc/rfc9162>.

   [RFC9596]  Jones, M.B. and O. Steele, "CBOR Object Signing and
              Encryption (COSE) "typ" (type) Header Parameter",
              RFC 9596, DOI 10.17487/RFC9596, June 2024,
              <https://www.rfc-editor.org/rfc/rfc9596>.

   [RFC9597]  Looker, T. and M.B. Jones, "CBOR Web Token (CWT) Claims in
              COSE Headers", RFC 9597, DOI 10.17487/RFC9597, June 2024,
              <https://www.rfc-editor.org/rfc/rfc9597>.

10.2.  Informative References

   [BCP205]   Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/rfc/rfc7942>.

   [I-D.draft-ietf-cbor-edn-literals]
              Bormann, C., "CBOR Extended Diagnostic Notation (EDN)",
              Work in Progress, Internet-Draft, draft-ietf-cbor-edn-
              literals-18, 7 July 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-cbor-
              edn-literals-18>.

   [RFC7120]  Cotton, M., "Early IANA Allocation of Standards Track Code
              Points", BCP 100, RFC 7120, DOI 10.17487/RFC7120, January
              2014, <https://www.rfc-editor.org/rfc/rfc7120>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/rfc/rfc8126>.

   [RFC8392]  Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", RFC 8392, DOI 10.17487/RFC8392,
              May 2018, <https://www.rfc-editor.org/rfc/rfc8392>.

   [RFC9052]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Structures and Process", STD 96, RFC 9052,
              DOI 10.17487/RFC9052, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9052>.

Appendix A.  Implementation Status

   Note to RFC Editor: Please remove this section as well as references
   to [BCP205] before AUTH48.

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [BCP205].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [BCP205], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

A.1.  Transmute Prototype

   An open-source implementation was initiated and is maintained by the
   Transmute Industries Inc. - Transmute.  An application demonstrating
   the concepts is available at COSE SCITT Receipts (https://github.com/
   transmute-industries/cose?tab=readme-ov-file#transparent-statement)

   Implementation URL: https://github.com/transmute-industries/cose
   Maturity: The code's level of maturity is considered to be
   "prototype".  Coverage and Version Compatibility: The current version
   ('main') implements the verifiable data structure algorithm,
   inclusion proof and consistency proof concepts of this draft.
   License: The project and all corresponding code and data maintained
   on GitHub are provided under the Apache License, version 2.  Contact:
   Orie Steele (orie@transmute.industries)

Authors' Addresses

   Orie Steele
   Transmute
   United States
   Email: orie@transmute.industries


   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   64295 Darmstadt
   Germany
   Email: henk.birkholz@ietf.contact


   Antoine Delignat-Lavaud
   Microsoft
   United Kingdom
   Email: antdl@microsoft.com


   Cedric Fournet
   Microsoft
   United Kingdom
   Email: fournet@microsoft.com
